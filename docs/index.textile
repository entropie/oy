h1. Oy! README

!>https://github.com/downloads/entropie/oy/oy.jpg!

h1. About

Oy! is a *Wiki* based on *git*. Purely written in *Ruby* with few dependencies. All you need to use it is clone Oy!, create a new git repos and start the application.

This is inspired by *gollum*, the *github* wiki. *Ramaze* is the framework.

The entire content is stored plaintext in the git repos, there are multiple ways to add/edit content. The Webfrontend, <code>$EDITOR</code> or the Oy! Ruby-API.

Pathnames for wikipages are as well available in the git repos. So the page you get while requesting <code>/test/index</code> is equivalent with <code>/path/to/your/repos/test/index.textile</code>. Media files, for now only images, are stored in <code>media/</code> with full history.

* Source on "Github":https://github.com/entropie/oy
* Running "Demo":http://wiki.kommunism.us, feel free to play around.

h2. Features

* No Database backend but <strong>Git</strong> powered.
* Nice default template. Besides this, the look of Oy! is *100%* customizeable for every single repository. Thanks to MVC(Model View Controller) its possible to edit template files or customize Javascript or CSS(Cascading style Sheets). Just create a <code>{_view,_public,_layout}</code> directory within your repos and copy the original files to the right location and edit them for your needs.
* Entire directories or single files are lockable from commandline. Given a file <code>./hello.textile</code> in your repository run a <code>touch ./hello.textile.locked && git add ./hello.textile.locked && git commit -m "lock hello"</code> and <code>/hello</code> is readonly for the webinterface or through the Oy! Api.
* Media files uploaded via the webinterface are stored with full history in the repository. To lock a directory: <code>touch ./.locked && git add ./.locked [...]</code> -- every single file in this directory is write protected now.
* Simple REST(Representational State Transfer) like api. Just try a <code>curl http://wiki.kommunism.us/api/GET/index</code>. Also its possible to POST -- The Oy! executable provides a method to do this. I'ts done like this <code>cat index.textile | oy.rb -P http://wiki.kommunism.us/index</code>
* Different Markups; for now *RedCloth* (which is default), *Markdown*, and *ORG*. I'ts dead simple to add your own.
* Unicode support for pages, try [[test/ěĕėƒĝğġģĥ ěĕėƒĝğġģĥ]]
* Support for graphs from tables, on top of Google graph api and "gvChart":http://www.ivellios.toron.pl/technikalia/2010/06/22/gvchart-plugin-jquery-with-google-charts/ gem

h3. Markups

* "Textile/RedCloth":http://www.textism.com/tools/textile/ <code>gem install RedCloth</code>, the default markup system.
* "Markdown":http://daringfireball.net/projects/markdown/http://daringfireball.net/projects/markdown/ <code>gem install rdiscount</code>
* "Org":http://orgmode.org/ <code>gem install org-ruby</code>

h2. Installation

For now the best way is to clone the repos, run <code>rake build</code> and install the gem:

<code>git clone git://github.com/entropie/oy.git && cd oy && rake build && sudo gem install pkg/*.gem</code>

h3. Running

After installation run <code>oy.rb --help</code>. For the lazy ones: <code>oy.rb -r /path/to/initialised/git/repos -p <port> -h <hostname></code>

The default port ist *8200* and the default hostname is *localhost*.

h3. Additional Infos

This is _really_ an early release. There will be bugs, probably lots of it. If a bug bites you in your hand please "file it":https://github.com/entropie/oy/issues. As well you might want to request features, which is totaly fine, but dont expect it will be done soon. You're encouraged to make a fork and add features yourself.

h4. Development

* "Generated Documentation":/doc/frames.html (yard)
* "Rspec output":/spec.html
* "Coverage":/doc/coverage/index.html
